module Main where
import Daml.Script




type ChoreProposalId = ContractId ChoreProposal
type ChoreContractlId = ContractId ChoreContract

--Proposal
template ChoreProposal
  with
    child : Party
    parent : Party
    chore : Text
    note : Text
  where
    signatory child

    --what the child can do
    controller child can
    --Prospose
        Propose : ChoreProposalId
            do
                create this
    --Revise
        Revise : ChoreProposalId
            with
                revision : Text
                feedbackText : Text
            do
                create this with
                    chore = revision
                    note = feedbackText

    --what the parent can do
    controller parent can
    --reject
        Reject : ChoreProposalId
            with
                feedback : Text
            do
                create this with
                    note = feedback
                
    --accept
        Accept : ChoreContractlId
            do
                create ChoreContract with
                    parentInContract = parent
                    childInContract = child
                    choreName = chore

--Contract
template ChoreContract
    with
        parentInContract : Party
        childInContract : Party
        choreName : Text
    where
        signatory parentInContract, childInContract

--test

setup : Script ChoreContractlId
setup = script do
    --assign parent and child parties
    ethan <- allocateParty "Ethan"
    steve <- allocateParty "Steve"

    --ethan proposes to take out the trash for v-bucks
    ethanProposal <- submit ethan do
        createCmd ChoreProposal with
            child = ethan
            parent = steve
            chore = "Take out todays recycle for 5,000 v-bucks"
            note = "Please!!! I dont want to be default!"

    --steve didn't like the terms, rejects it w/ feedback
    steveRejectsProposal <- submit steve do
        exerciseCmd ethanProposal Reject
            with
                feedback = "You joking right? Try all month!"

    --ethan revises the terms, and re-proposes
    ethanProposal2 <- submit ethan do
        exerciseCmd steveRejectsProposal Revise
            with
                revision = "Take out recycle 4 times this month for 3,000 vbucks"
                feedbackText = "Fine! How About this?"

    -- steve like new terms, accepts it
    submit steve do
        exerciseCmd ethanProposal2 Accept